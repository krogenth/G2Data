.MDT FILES {
	CODES			DETAILS
	0x1A			next page
	0x1F			next line
	0x1D FF XX		pause(frame/tick?)
	0x05 XX YY		XX = script number? YY = character id
	0x17 XX	[YY ZZ]	Box stuff
		XX = 00			Remove textbox? Used at end of dialogues
		XX = 01			Create textbox? Used at beginning of dialogues
		XX = 80, YY ZZ	Create overword textbox, YY = length of textbox, ZZ = height of textbox
	0x08 XX YY ZZ	XX = ???, YY = ???(noticed either 0x21 or 0x41), ZZ = ???(only been 0x01)
	0x11 XX []		adds item to inventory, XX = ???
	0x18 00 XX		changes character protrait, XX = character protrait offset

	0x0008	-	# Map Entry Locations 32 byte Entries
	0x000C	-	Map Entry Locations Offset
	0x0018	-	# Intances 30 Byte Entries
	0x001C	-	Instances Offset
	0x0028	-	# Movement Scirpts?
	0x002C	-	Movement Scripts Offset
	0x0038	-	# Enemy Groups Positions 104 Byte Entries
	0x003C	-	Enemy Groups Positions Offset
	0x0048	-	# Enemy Group Data 120 Byte Entries
	0x004C	-	Enemy Group Data Offset
	0x0078	-	Dialogue Byte Length
	0x007C	-	Dialogue Offset
	0x0080	-	# Unknown 12 Byte Entries
	0x0084	-	Unknown Entries Offset
	0x0088	-	# Unknown 16 Byte Entries
	0x008C	-	Unknown Entries Offset
	0x0090	-	# Unknown 8 Byte Entries
	0x0094	-	Unknown Entries Offset
	0x0098	-	# Icon 32 Byte Entries
	0x009C	-	Icon Entries Offset(overworld interactables)
	0x00A0	-	# Unknown Bytes
	0x00A4	-	Unknown Data
	0x00A8	-	Length of Shop Data
	0x00AC	-	Offset to Shop Data
	0x00B8	-	# Unknown 18 Byte Entries
	0x00BC	-	Unknown Entries Offset
	0x00C0	-	# Unknown 128 Byte Entries
	0x00C4	-	Unknown Entries Offset

	INSTANCES
		02 byte ID
		02 byte Index
		02 byte ???
		02 byte Trans
		04 byte X Position Float
		04 byte Y Position Float
		04 byte Z Position Float
		04 byte X Angle Float
		04 byte Y Angle Float
		04 byte Z Angle Float
		04 byte CX Float
		04 byte CY Float
		04 byte CZ Float
		
	Enemy Groups(104 byte entries)
		02 byte Index
		02 byte ???
		04 byte X position minimum
		04 byte Z position minimum
		04 byte X position maximum
		04 byte Z position maximum
		04 byte X Position
		04 byte Y Position
		04 byte Z Position
		
	ENEMY DATA(120 byte)
		02 byte Index
		
	ICONS
		01 byte ID
		03 byte ???
		04 byte X Position
		04 byte Y Position
		04 byte Z Position
		08 byte ???
		06 byte Item Offsets(2 byte)
		02 byte Flag


	2000.mdt
		ryudo script 0x2804
		
}

MODELS {	//All Ninja formats use POF0, which means pointers go from the start of the chunk, not file
	
	.CHR/.CHR2 FILES {
		
		2000.CHR
			Elena
			Father Carius
			Kid
		
	}
	
	CHARACTER MODEL *.DAT FILES {
		
		GIXL header
		Stores NJCM then NMDM files
		
	}

	ENEMY MODEL *.DAT FILES {
		
		4 byte remaining header byte length	//(0x20(32) bytes max)
			4 byte file offset
			4 byte file length
		
	}
		
	NJCM {
		
		Chunk header types {
			
			0x00 - 0x00 null
			0x01 - 0x05 Bits
				1 NJD_CB_BA			//Alpha blend												3 bits for alpha SRC and 3 bits for alpha DST
				2 NJD_CB_DA			//Mipmap “D” adjust											4 bits for “D” adjust
				3 NJD_CB_EXP		//Specular exponent											5 bits for the exponent
				4 NJD_CB_CP			//Cache polygon list										8 bits for the cache number
				5 NJD_CB_DP			//Draw polygon list											8 bits for the cache number
			0x08 - 0x09 Tiny
			0x11 - 0x1F Material
				17 NJD_CM_D			//Diffuse													4 bytes
				18 NJD_CM_A			//Ambient													4 bytes
				19 NJD_CM_DA		//Diffuse, Ambient											8 bytes
				20 NJD_CM_S			//Specular													4 bytes
				21 NJD_CM_DS		//Diffuse, Specular											8 bytes
				21 NJD_CM_AS		//Ambient, Specular											8 bytes
				21 NJD_CM_DAS		//Diffuse, Ambient, Specular								12 bytes
			0x20 - 0x32 Vertex
				32 NJD_CV_SH		//x,y,z,1.0F												16 bytes
				33 NJD_CV_VN_SH		//x,y,z,1.0F,nx,ny,nz,0.0F									32 bytes
				34 NJD_CV			//x,y,z														12 bytes
				35 NJD_CV_D8		//x,y,z,D8888												16 bytes
				36 NJD_CV_UF		//x,y,z,UserFlags32											16 bytes
				37 NJD_CV_NF		//x,y,z,NinjaFlags32										16 bytes
				38 NJD_CV_S5		//x,y,z,D565,S565											16 bytes
				39 NJD_CV_S4		//x,y,z,D4444,S565											16 bytes
				40 NJD_CV_IN		//x,y,z,D16,S16												16 bytes
				41 NJD_CV_VN		//x,y,z,nx,ny,nz											24 bytes
				42 NJD_CV_VN_D8		//x,y,z,nx,ny,nz,D8888										28 bytes
				43 NJD_CV_VN_UF		//x,y,z,nx,ny,nz,UserFlags32								28 bytes
				44 NJD_CV_VN_NF		//x,y,z,nx,ny,nz,NinjaFlags32								28 bytes
				45 NJD_CV_VN_S5		//x,y,z,nx,ny,nz,D565,S565									28 bytes
				46 NJD_CV_VN_S4		//x,y,z,nx,ny,nz,D4444,S565									28 bytes
				47 NJD_CV_VN_IN		//x,y,z,nx,ny,nz,D16,S16									28 bytes
				48 NJD_CV_VNX		//x,y,z,nxyz32												16 bytes
				49 NJD_CV_VNX_D8	//x,y,z,nxyz32,D8888										20 bytes
				50 NJD_CV_VNX_UF	//x,y,z,nxyz32,UserFlags32									20 bytes
			0x38 - 0x3A Volume
			0x40 - 0x4B Strip
				65 NJD_CS			//index0(16)												16 bytes
				66 NJD_CS_UVN		//index0(16), U0(16), V0(16)								48 bytes
				67 NJD_CS_UVH		//index0(16), U0(16), V0(16)								48 bytes
				68 NJD_CS_VN		//index0(16), vnx0(16), vny0(16), vnz0(16)					64 bytes
				69 NJD_CS_UVN_VN	//index0(16), U0(16), V0(16), vnx0(16), vny0(16), vnz0(16)	96 bytes
				70 NJD_CS_UVH_VN	//index0(16), U0(16), V0(16), vnx0(16), vny0(16), vnz0(16)	96 bytes
				71 NJD_CS_D8		//index0(16), AR0(16), GB0(16)								48 bytes
				72 NJD_CS_UVN_D8	//index0(16), U0(16), V0(16), AR0(16), GB0(16)				80 bytes
				73 NJD_CS_UVH_D8	//index0(16), U0(16), V0(16), AR0(16), GB0(16)				80 bytes
				74 NJD_CS_2			//index0(16),												16 bytes
				75 NJD_CS_UVN2		//index0(16), U0a(16), V0a(16), U0b(16), V0b(16)			80 bytes
				76 NJD_CS_UVH2		//index0(16), U0a(16), V0a(16), U0b(16), V0b(16)			80 bytes
			0xFF - 0xFF End
			
		}
		
		4 byte remaining length
		4 byte evaluation flag
			0x00000001 Don't apply translation, when x, y, z are 0
			0b00000010 Don't apply rotation, when rot_x, rot_y, rot_z are 0
			0b00000100 Don't apply scale, when scl_x, scl_y, scl_z are 0
			0b00001000 Don't render model
			0b00010000 Break child trace, don't render child objects
			0b00100000 ZXY rotation order, apply rotations in LightWave3D order
			0b01000000 Skip motion
			0b10000000 Skip shape motion
		4 byte NJS_MODEL pointer	//from start of model chunk
			4 byte NJS_VERTEX_LIST pointer	//from start of model chunk
				1 byte chunk type
				1 byte flags
				2 byte chunk length
				2 byte vertex data offset
				2 byte vertex count
				? byte vertex data
					4[3] byte vertex
			4 byte NJS_INDICE_LIST pointer	//from start of model chunk
				"material, tiny, bit, null, strip chunks"
			4[3] byte float model center
			4 byte float radius of circumscribed sphere
		4[3] byte float position
		4[3] byte int32_t rotation
		4[3] byte float scale
		4 byte child object pointer	//from start of model chunk
		4 byte sibling object pointer	//from start of model chunk
		
		Bits Chunk
			2 byte chunk head
			2 byte flags
			
		Tiny Chunk
			1 byte chunk head
			1 byte flags
				0x07 mip_depth
				0x08 clamp_u
				0x10 clamp_v
				0x20 flip_u
				0x40 flip_v
			2 byte chunk body
				13 bits texture ID	//least significant
				1 bit super sample
				2 bit filter mode	//most significant
				
		Material Chunk
			1 byte chunk head
			1 byte flags
			2 byte chunk length
			4 byte diffuse color		//chunk head & 0x01
			4 byte spectacular color	//chunk head & 0x02
			4 byte ambient color		//chunk head & 0x04
			
		Vertex Chunk
			1 byte chunk head
			1 byte chunk flag
			2 byte chunk length
			2 byte vertex offset
			2 byte vertex count
			? byte vertex data
				4[3] byte vertex
				
		Strip Chunk
			1 byte chunk head
			1 byte chunk flag
			2 byte chunk length
			2 byte chunk count
			? byte strip data
				
	}
	
	NMDM {
		
		4 byte remaining length
		1 byte[remaining length] chunk body
			4 byte motion data
			4 byte frame count
			2 byte motion type	//flags for position, rotation, and scale
				0x01 position
				0x02 rotation
				0x04 scale
			2 byte int_fp	//interpolation & factor count: increment for position/rotation/scale if they are used
				0x03 factor count
				0x40 spline interpolation
				0x80 user interpolation
		
		NJS_MDATA
			4[int_fp] byte factor pointer
			4[3] byte factor count
		
	}
	
	CDDH(CHR, CHR2)
		4 byte remaining header byte length
			4 byte number of entries
			4 byte file number
			4 byte NMDM file(s) offset
				
	GPHD(CHR, CHR2)
		4 byte remaining header byte length
			4 byte ???
			
	MIXL(CHR, CHR2)
		4 byte remaining header byte length
			1 byte ???
			1 byte number of ???
				1 byte incremental to number(end padded with 0xFF to nearest 4 bytes)
					
	GIXL(CHR)
		4 byte remaining header byte length
			4 byte number of entries
				4 byte ???
				
	GAMT(CHR, CHR2)
		4 byte remaining header byte length
			4 byte ???	//only 0 or 1 so far
				
	MCS_(CHR)
		4 byte remaining length
			4 byte number of entries
				4 byte ???
				4 byte 0x????FFFF end	//included in number of entires
	
	NJTL
		4 byte remaining length
			4 byte NJS_TEXNAME pointer(offset from current position)
			2 byte number of textures
				4 byte texture number
				8 byte ???
					
	GBIX
		4 byte remaining length
			4 byte Global Index
			4 byte 0x00000000 or 0x20202020
	
	PVRT
		4 byte remaining length
		1 byte pixel format	//2 byte per pixel
			0x00 ARGB1555	//1-bit A, 5-bit RGB
			0x01 RGB565		//5-bit RB, 6-bit G
			0x02 ARGB4444	//4-bit ARGB
		1 byte data format
			0x01 Squared twiddled
			0x02 Squared twiddled with mipmap
			0x03 VQ		//vector quantization
			0x04 VQ with mipmap
			0x05 4-bit indexed with external palette
			0x07 8-bit indexed with external palette
			0x09 Rectangle
			0x0D Rectangle Twiddled
			0x10 Small VQ
			0x11 Small VQ with mipmap
			0x12 Square twiddled with mipmap(alternative)
		2 byte 0x0000
		2 byte texture width
		2 byte texture height
		? byte palatte data
		? byte texture data		//if mipmap, go smallest to largest
					
	POF0
		4 byte remaining length
			4 byte ???

	*.PVP FILES {
		
		F_ICON_32.PVP == F_FACE_SP.PVP
		
		PVPL
			4 byte remaining length
			4 byte ???	//0x06000000
			4 byte ???	//0x00000001
			
		
	}

}

FONT FILE {
	
	xls_data/gr2us.dat	Follows unicode dictionary starting at 0x20(space)

}

TB_SPCL.BIN(24 byte entries) {
	
	1 byte Attack Offset
	1 byte Attack Starting Level
	2 byte Story Flag Requirement
	
}
	
TB_SKILL.BIN(24 byte entries) {
	
	1 byte Skill Offset
	1 byte Starting Level
	1 byte Skillbook Level Requirement
	1 byte Unknown
	
}

TB_MAGIC.BIN(72 byte entries) {
	
	1 byte Attack Offset
	1 byte Attack Starting Level
	1 byte Mana Egg Level Requirement
	1 byte Unknown
	
}
	
TB_LVUP.BIN(24 byte entries)(Starts @ Lvl 1) {
	
	4 byte EXP Requirement
	2 byte HP Increase
	2 byte MP Increase
	2 byte SP Increase
	2 byte STR Increase
	2 byte VIT Increase
	2 byte MAG Increase
	2 byte MEN Increase
	2 byte MOV Increase
	2 byte ACT Increase
	2 byte Skill Slot Increase
	
}
	
PC_INIT.BIN(80 byte entries) {
	
	4 byte EXP Starting
	38 byte Unknown
	1 byte Attack SP Recovery
	1 byte Critical SP Recovery
	1 byte Unknown
	1 byte Damaged SP Recovery
	1 byte Unknown
	1 byte Evasion
	1 byte Move Evasion
	1 byte R_KB
	32 byte Unknown
	
}

TB_SHOP.BIN(164 byte entries) {
	
	2 byte Map Name(by folder name)
	2 byte Number of catagories(?)
	8 byte "weapons"
	24 byte Item Listing
		2 byte Item "ID"(offset by 0x0008)
	8 byte "  armor"
	24 byte Item Listing
		2 byte Item "ID"(offset by 0x0008)
	8 byte "jewelry"
	24 byte Item Listing
		2 byte Item "ID"(offset by 0x0008)
	8 byte "   items"
	24 byte Item Listing
		2 byte Item "ID"(offset by 0x0008)
	8 byte "regional"
	24 byte Item Listing
		2 byte Item "ID"(offset by 0x0008)
		
}

SAVE FILES {
	
	Stats offset 0x308(108 byte entries)
		12 byte Name(Trailing 0's)
		2 byte Level
		4 byte Current EXP
		4 byte EXP to Next Level
		4 byte Current Max HP
		2 byte Current HP
		2 byte Current Max MP
		2 byte Current MP
		2 byte Current Max SP
		2 byte Current SP
		2 byte STR
		2 byte VIT
		2 byte ACT
		2 byte MOV
		2 byte MAG
		2 byte MEN
		12 byte ???
		2 byte Weapon
		2 byte Armor
		2 byte Headgear
		2 byte Footwear
		2 byte Accessory
		2 byte Mana Egg
		2 byte Skill Slots
		30 byte ???
		160 byte copy of relevant TB_SPCL.BIN data(including story flags)
	
}
	
ENEMY FILES {
	
	AI DATA
		0x01 Entry AI
		0x06 HP Threshold? AI
		
	d18_0	-	Mottled Spider
		0x0000	-	Required to properly link enemy data
		
		0x0034	-	Offset to Enemy Data
		0x0038	-	Enemy Data Length
		0x003C	-	Offset to Moves Data
		0x0040	-	Moves Data Length
		0x0044	-	Offset to Enemy Data v2
		0x0048	-	Enemy Data v2 Length
		0x004C	-	Offset to Moves Data v2
		0x0050	-	Moves Data v2 Length
		
}